name: "Create Repo PR"
on:
  issues:
    types: [opened]

jobs:
  extract_info:
    name: Extract Issue Information
    if: contains(github.event.issue.labels.*.name, 'new-repo')
    runs-on: ubuntu-latest
    outputs:
      name: ${{ steps.extract_info.outputs.NAME }}
      description: ${{ steps.extract_info.outputs.DESCRIPTION }}
      visibility: ${{ steps.extract_info.outputs.VISIBILITY }}
      template: ${{ steps.extract_info.outputs.TEMPLATE }}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Parse Issue Body
        env:
          ISSUE_BODY: ${{ github.event.issue.body }}
        run: |
          echo "$ISSUE_BODY" > issue_body.md
          python extract-repo-info.py issue_body.md

      - name: Extract Repo Information
        id: extract_info
        run: |
          echo "NAME=$(grep 'Name:' extracted_info.txt | cut -d':' -f2- | xargs)" >> $GITHUB_OUTPUT
          echo "DESCRIPTION=$(grep 'Description:' extracted_info.txt | cut -d':' -f2- | xargs)" >> $GITHUB_OUTPUT
          echo "VISIBILITY=$(grep 'Visibility:' extracted_info.txt | cut -d':' -f2- | xargs)" >> $GITHUB_OUTPUT
          echo "TEMPLATE=$(grep 'Template:' extracted_info.txt | cut -d':' -f2- | xargs)" >> $GITHUB_OUTPUT

      - name: Print Extracted Information
        run: |
          echo "Name: ${{ steps.extract_info.outputs.NAME }}"
          echo "Description: ${{ steps.extract_info.outputs.DESCRIPTION }}"
          echo "Visibility: ${{ steps.extract_info.outputs.VISIBILITY }}"
          echo "Template: ${{ steps.extract_info.outputs.TEMPLATE }}"

  repository_changes:
    name: GitHub Repository Changes
    needs: [extract_info]
    runs-on: ubuntu-latest
    outputs:
      name: ${{ needs.extract_info.outputs.name }}
      description: ${{ needs.extract_info.outputs.description }}
      visibility: ${{ needs.extract_info.outputs.visibility }}
      template: ${{ needs.extract_info.outputs.template }}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Get Token From GitHub APP
        id: get_token
        uses: actions/create-github-app-token@v1
        with:
          app-id: ${{ vars.APP_ID }}
          private-key: ${{ secrets.APP_PRIVATE_KEY }}
          repositories: "terraform-github"

      - name: Get file to modify
        id: get_file
        run: |
          if [ "${{ needs.extract_info.outputs.template }}" = "spring-boot-template" ]; then
            echo "file=spring-boot-repos.tf" >> $GITHUB_OUTPUT
          elif [ "${{ needs.extract_info.outputs.template }}" = "nodejs-template" ]; then
            echo "file=nodejs-repos.tf" >> $GITHUB_OUTPUT
          else
            echo "file=repos.tf" >> $GITHUB_OUTPUT
          fi

      - name: Modify repos file
        env:
          NAME: ${{ needs.extract_info.outputs.name }}
          DESCRIPTION: ${{ needs.extract_info.outputs.description }}
          VISIBILITY: ${{ needs.extract_info.outputs.visibility }}
          TEMPLATE: ${{ needs.extract_info.outputs.template }}
        run: |
          # Set template variables based on selection
          if [ "${{ env.TEMPLATE }}" = "No template" ]; then
          cat <<EOF >> ${{ steps.get_file.outputs.file }}

          module "${{ env.NAME }}" {
            source      = "./modules/repo"
            name        = "${{ env.NAME }}"
            description = "${{ env.DESCRIPTION }}"
            visibility  = "${{ env.VISIBILITY }}"

            environments = {
              test = {
                name = "test"
                reviewers = []
              }
              production = {
                name = "production"
                reviewers = [module.admins.id]
              }
            }
          }
          EOF
          else
          cat <<EOF >> ${{ steps.get_file.outputs.file }}

          module "${{ env.NAME }}" {
            source      = "./modules/repo"
            name        = "${{ env.NAME }}"
            description = "${{ env.DESCRIPTION }}"
            visibility  = "${{ env.VISIBILITY }}"
            template_owner = "${{ github.repository_owner }}"
            template_repository = "${{ env.TEMPLATE }}"

            environments = {
              test = {
                name = "test"
                reviewers = []
              }
              production = {
                name = "production"
                reviewers = [module.admins.id]
              }
            }
          }
          EOF
          fi

      - name: Commit changes
        env:
          NAME: ${{ needs.extract_info.outputs.name }}
        run: |
          git config --global user.email "unir-tfm-devops[bot]@users.noreply.github.com"
          git config --global user.name "unir-tfm-devops[bot]"
          git remote set-url origin https://x-access-token:${{ steps.get_token.outputs.token }}@github.com/${{ github.repository }}
          git checkout -b feature/new-repository-${{ env.NAME }}
          git add ${{ steps.get_file.outputs.file }}
          git commit -m "Modify ${{ steps.get_file.outputs.file }}"
          git push origin feature/new-repository-${{ env.NAME }}

  repository_pr:
    name: Create PR for repository
    needs: repository_changes
    runs-on: ubuntu-latest
    outputs:
      pr_url: ${{ env.PR_URL }}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Get Token From GitHub APP
        id: get_token
        uses: actions/create-github-app-token@v1
        with:
          app-id: ${{ vars.APP_ID }}
          private-key: ${{ secrets.APP_PRIVATE_KEY }}

      - name: Create Pull Request
        id: create_pr
        env:
          NAME: ${{ needs.repository_changes.outputs.name }}
          DESCRIPTION: ${{ needs.repository_changes.outputs.description }}
          VISIBILITY: ${{ needs.repository_changes.outputs.visibility }}
          TEMPLATE: ${{ needs.repository_changes.outputs.template }}
          GITHUB_TOKEN: ${{ steps.get_token.outputs.token }}
          ISSUE_URL: ${{ github.event.issue.html_url }}
          ISSUE_NUMBER: ${{ github.event.issue.number }}
        run: |
          # Format template info for PR description
          if [ "${{ env.TEMPLATE }}" = "No template" ]; then
            TEMPLATE_INFO="No template (empty repository)"
          else
            TEMPLATE_INFO="${{ env.TEMPLATE }}"
          fi

          PR_URL=$(gh pr create \
            -B main \
            -H feature/new-repository-${{ env.NAME }} \
            -t "Add new repository: ${{ env.NAME }}" \
            -b "### Summary
            This PR creates a new repository as requested in [Issue #${{ env.ISSUE_NUMBER }}](${{ env.ISSUE_URL }}).

            **Repository Name:** ${{ env.NAME }}
            **Description:** ${{ env.DESCRIPTION }}
            **Visibility:** ${{ env.VISIBILITY }}
            **Template:** $TEMPLATE_INFO

            ### Checklist
            - [ ] Verify repository name and description
            - [ ] Confirm Terraform syntax correctness
            - [ ] Merge once validated

            Closes #${{ env.ISSUE_NUMBER }}" \
            -l "new-repo")

          echo "PR_URL=$PR_URL" >> $GITHUB_ENV

  ecr_changes:
    name: ECR Changes
    needs: [extract_info]
    runs-on: ubuntu-latest
    outputs:
      name: ${{ needs.extract_info.outputs.name }}
    steps:
      - name: Get Token From GitHub APP
        id: get_token
        uses: actions/create-github-app-token@v1
        with:
          app-id: ${{ vars.APP_ID }}
          private-key: ${{ secrets.APP_PRIVATE_KEY }}
          owner: ${{ github.repository_owner }}

      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          token: ${{ steps.get_token.outputs.token }}
          repository: ${{ github.repository_owner }}/terraform-ecr
          path: terraform-ecr

      - name: Add new ECR
        working-directory: terraform-ecr
        env:
          NAME: ${{ needs.extract_info.outputs.name }}
        run: |
          # Add new ECR module to main.tf
          cat <<EOF >> main.tf

          module "${{ env.NAME }}" {
            source = "./modules/ecr"

            name = "${{ env.NAME }}"
          }
          EOF

      - name: Commit ECR changes
        working-directory: terraform-ecr
        env:
          NAME: ${{ needs.extract_info.outputs.name }}
        run: |
          git config --global user.email "unir-tfm-devops[bot]@users.noreply.github.com"
          git config --global user.name "unir-tfm-devops[bot]"
          git remote set-url origin https://x-access-token:${{ steps.get_token.outputs.token }}@github.com/${{ github.repository_owner }}/terraform-ecr
          git checkout -b feature/new-ecr-${{ env.NAME }}
          git add main.tf
          git commit -m "Add ECR repository for ${{ env.NAME }}"
          git push origin feature/new-ecr-${{ env.NAME }}

  ecr_pr:
    name: Create PR for ECR
    needs: ecr_changes
    runs-on: ubuntu-latest
    outputs:
      pr_url: ${{ env.ECR_PR_URL }}
    steps:
      - name: Get Token From GitHub APP
        id: get_token
        uses: actions/create-github-app-token@v1
        with:
          app-id: ${{ vars.APP_ID }}
          private-key: ${{ secrets.APP_PRIVATE_KEY }}
          owner: ${{ github.repository_owner }}

      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          token: ${{ steps.get_token.outputs.token }}
          repository: ${{ github.repository_owner }}/terraform-ecr
          path: terraform-ecr

      - name: Create ECR Pull Request
        working-directory: terraform-ecr
        env:
          NAME: ${{ needs.ecr_changes.outputs.name }}
          GITHUB_TOKEN: ${{ steps.get_token.outputs.token }}
          ISSUE_URL: ${{ github.event.issue.html_url }}
          ISSUE_NUMBER: ${{ github.event.issue.number }}
        run: |
          PR_URL=$(gh pr create \
            -B main \
            -H feature/new-ecr-${{ env.NAME }} \
            -t "Add ECR repository for ${{ env.NAME }}" \
            -b "### Summary
            This PR adds a new ECR module for the repository created in [Issue #${{ env.ISSUE_NUMBER }}](${{ env.ISSUE_URL }}).

            **ECR Name:** ${{ env.NAME }}

            ### Checklist
            - [ ] Verify ECR module configuration
            - [ ] Confirm Terraform syntax correctness
            - [ ] Merge once validated

            Related to #${{ env.ISSUE_NUMBER }}")

          echo "ECR_PR_URL=$PR_URL" >> $GITHUB_ENV

  sonarqube_changes:
    name: SonarQube Changes
    needs: [extract_info]
    runs-on: ubuntu-latest
    outputs:
      name: ${{ needs.extract_info.outputs.name }}
    steps:
      - name: Get Token From GitHub APP
        id: get_token
        uses: actions/create-github-app-token@v1
        with:
          app-id: ${{ vars.APP_ID }}
          private-key: ${{ secrets.APP_PRIVATE_KEY }}
          owner: ${{ github.repository_owner }}

      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          token: ${{ steps.get_token.outputs.token }}
          repository: ${{ github.repository_owner }}/sonarqube-projects
          path: sonarqube-projects

      - name: Add new SonarQube project
        working-directory: sonarqube-projects
        env:
          NAME: ${{ needs.extract_info.outputs.name }}
        run: |
          # Add new project to sonarqube-projects.yaml
          cat <<EOF >> sonarqube-projects.yaml
            - key: "${{ env.NAME }}"
              visibility: "public"
          EOF

      - name: Commit SonarQube changes
        working-directory: sonarqube-projects
        env:
          NAME: ${{ needs.extract_info.outputs.name }}
        run: |
          git config --global user.email "unir-tfm-devops[bot]@users.noreply.github.com"
          git config --global user.name "unir-tfm-devops[bot]"
          git remote set-url origin https://x-access-token:${{ steps.get_token.outputs.token }}@github.com/${{ github.repository_owner }}/sonarqube-projects
          git checkout -b feature/new-sonarqube-${{ env.NAME }}
          git add sonarqube-projects.yaml
          git commit -m "Add SonarQube project for ${{ env.NAME }}"
          git push origin feature/new-sonarqube-${{ env.NAME }}

  sonarqube_pr:
    name: Create PR for SonarQube
    needs: sonarqube_changes
    runs-on: ubuntu-latest
    outputs:
      pr_url: ${{ env.SONARQUBE_PR_URL }}
    steps:
      - name: Get Token From GitHub APP
        id: get_token
        uses: actions/create-github-app-token@v1
        with:
          app-id: ${{ vars.APP_ID }}
          private-key: ${{ secrets.APP_PRIVATE_KEY }}
          owner: ${{ github.repository_owner }}

      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          token: ${{ steps.get_token.outputs.token }}
          repository: ${{ github.repository_owner }}/sonarqube-projects
          path: sonarqube-projects

      - name: Create SonarQube Pull Request
        working-directory: sonarqube-projects
        env:
          NAME: ${{ needs.sonarqube_changes.outputs.name }}
          GITHUB_TOKEN: ${{ steps.get_token.outputs.token }}
          ISSUE_URL: ${{ github.event.issue.html_url }}
          ISSUE_NUMBER: ${{ github.event.issue.number }}
        run: |
          PR_URL=$(gh pr create \
            -B main \
            -H feature/new-sonarqube-${{ env.NAME }} \
            -t "Add SonarQube project for ${{ env.NAME }}" \
            -b "### Summary
            This PR adds a new SonarQube project for the repository created in [Issue #${{ env.ISSUE_NUMBER }}](${{ env.ISSUE_URL }}).

            **Project Key:** ${{ env.NAME }}
            **Visibility:** public

            ### Checklist
            - [ ] Verify SonarQube project configuration
            - [ ] Confirm YAML syntax correctness
            - [ ] Merge once validated

            Related to #${{ env.ISSUE_NUMBER }}")

          echo "SONARQUBE_PR_URL=$PR_URL" >> $GITHUB_ENV

  comment_on_issue:
    name: Comment on Issue
    needs: [repository_pr, ecr_pr, sonarqube_pr]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Get Token From GitHub APP
        id: get_token
        uses: actions/create-github-app-token@v1
        with:
          app-id: ${{ vars.APP_ID }}
          private-key: ${{ secrets.APP_PRIVATE_KEY }}
          owner: ${{ github.repository_owner }}

      - name: Comment on Issue
        env:
          GITHUB_TOKEN: ${{ steps.get_token.outputs.token }}
          ISSUE_NUMBER: ${{ github.event.issue.number }}
          REPO_PR_URL: ${{ needs.repository_pr.outputs.pr_url }}
          ECR_PR_URL: ${{ needs.ecr_pr.outputs.pr_url }}
          SONARQUBE_PR_URL: ${{ needs.sonarqube_pr.outputs.pr_url }}
        run: |
          gh issue comment ${{ env.ISSUE_NUMBER }} --body "✅ Pull requests have been created to address this issue:

          **Repository PR:** ${{ env.REPO_PR_URL }}
          **ECR PR:** ${{ env.ECR_PR_URL }}
          **SonarQube PR:** ${{ env.SONARQUBE_PR_URL }}

          Please review all pull requests and provide feedback. Once approved, merge them to create the new repository, ECR repository, and SonarQube project."
