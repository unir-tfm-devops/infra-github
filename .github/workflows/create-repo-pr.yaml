name: "Create Repo PR"
on:
  issues:
    types: [opened]

jobs:
  extract_info:
    name: Extract Issue Information
    if: contains(github.event.issue.labels.*.name, 'new-repo')
    runs-on: ubuntu-latest
    outputs:
      name: ${{ steps.extract_info.outputs.NAME }}
      description: ${{ steps.extract_info.outputs.DESCRIPTION }}
      visibility: ${{ steps.extract_info.outputs.VISIBILITY }}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Parse Issue Body
        env:
          ISSUE_BODY: ${{ github.event.issue.body }}
        run: |
          echo "$ISSUE_BODY" > issue_body.md
          python extract-repo-info.py issue_body.md

      - name: Extract Repo Information
        id: extract_info
        run: |
          echo "NAME=$(grep 'Name:' extracted_info.txt | cut -d':' -f2- | xargs)" >> $GITHUB_OUTPUT
          echo "DESCRIPTION=$(grep 'Description:' extracted_info.txt | cut -d':' -f2- | xargs)" >> $GITHUB_OUTPUT
          echo "VISIBILITY=$(grep 'Visibility:' extracted_info.txt | cut -d':' -f2- | xargs)" >> $GITHUB_OUTPUT

      - name: Print Extracted Information
        run: |
          echo "Name: ${{ steps.extract_info.outputs.NAME }}"
          echo "Description: ${{ steps.extract_info.outputs.DESCRIPTION }}"
          echo "Visibility: ${{ steps.extract_info.outputs.VISIBILITY }}"

  commit_changes:
    name: Commit Changes
    needs: [extract_info]
    runs-on: ubuntu-latest
    outputs:
      name: ${{ needs.extract_info.outputs.name }}
      description: ${{ needs.extract_info.outputs.description }}
      visibility: ${{ needs.extract_info.outputs.visibility }}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Get Token From GitHub APP
        id: get_token
        uses: actions/create-github-app-token@v1
        with:
          app-id: ${{ vars.APP_ID }}
          private-key: ${{ secrets.APP_PRIVATE_KEY }}

      - name: Modify main.tf
        env:
          NAME: ${{ needs.extract_info.outputs.name }}
          DESCRIPTION: ${{ needs.extract_info.outputs.description }}
          VISIBILITY: ${{ needs.extract_info.outputs.visibility }}
        run: |
          cat <<EOF >> main.tf

          module "${{ env.NAME }}" {
            source      = "./modules/repo"
            name        = "${{ env.NAME }}"
            description = "${{ env.DESCRIPTION }}"
            visibility  = "${{ env.VISIBILITY }}"
          }
          EOF

      - name: Commit changes
        env:
          NAME: ${{ needs.extract_info.outputs.name }}
        run: |
          git config --global user.email "unir-tfm-devops[bot]@users.noreply.github.com"
          git config --global user.name "unir-tfm-devops[bot]"
          git remote set-url origin https://x-access-token:${{ steps.get_token.outputs.token }}@github.com/${{ github.repository }}
          git checkout -b feature/new-repository-${{ env.NAME }}
          git add main.tf
          git commit -m "Modify main.tf"
          git push origin feature/new-repository-${{ env.NAME }}

  create_pr:
    name: Create Pull Request
    needs: commit_changes
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Get Token From GitHub APP
        id: get_token
        uses: actions/create-github-app-token@v1
        with:
          app-id: ${{ vars.APP_ID }}
          private-key: ${{ secrets.APP_PRIVATE_KEY }}

      - name: Create Pull Request
        id: create_pr
        env:
          NAME: ${{ needs.commit_changes.outputs.name }}
          DESCRIPTION: ${{ needs.commit_changes.outputs.description }}
          VISIBILITY: ${{ needs.commit_changes.outputs.visibility }}
          GITHUB_TOKEN: ${{ steps.get_token.outputs.token }}
          ISSUE_URL: ${{ github.event.issue.html_url }}
          ISSUE_NUMBER: ${{ github.event.issue.number }}
        run: |
          PR_URL=$(gh pr create \
            -B main \
            -H feature/new-repository-${{ env.NAME }} \
            -t "Add new repository: ${{ env.NAME }}" \
            -b "### Summary
            This PR creates a new repository as requested in [Issue #${{ env.ISSUE_NUMBER }}](${{ env.ISSUE_URL }}).

            **Repository Name:** ${{ env.NAME }}
            **Description:** ${{ env.DESCRIPTION }}
            **Visibility:** ${{ env.VISIBILITY }}

            ### Checklist
            - [ ] Verify repository name and description
            - [ ] Confirm Terraform syntax correctness
            - [ ] Merge once validated

            Closes #${{ env.ISSUE_NUMBER }}" \
            -l "new-repo")

          echo "PR_URL=$PR_URL" >> $GITHUB_ENV

      - name: Comment on Issue
        env:
          GITHUB_TOKEN: ${{ steps.get_token.outputs.token }}
          ISSUE_URL: ${{ github.event.issue.html_url }}
          ISSUE_NUMBER: ${{ github.event.issue.number }}
          PR_URL: ${{ env.PR_URL }}
        run: |
          gh issue comment ${{ env.ISSUE_NUMBER }} --body "A pull request has been created to address this issue: ${{ env.PR_URL }}. Please review and provide feedback."
